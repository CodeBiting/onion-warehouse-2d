doctype html
html(lang="en")
    head
        meta(charset="UTF-8")
        title 2D Map with Pixi.js
        script(src="https://cdnjs.cloudflare.com/ajax/libs/pixi.js/6.5.4/browser/pixi.min.js" integrity="sha512-MLJM72M8frjnFXEvWn3NaVkrSxlDnbRK/Iwyr7loPca+13SdS9B5sNLHoIkDxfPOndP8WReNdwGLxisYUapc7A==" crossorigin="anonymous" referrerpolicy="no-referrer")
        script(src="https://cdn.jsdelivr.net/npm/pixi-viewport@4.30.0/dist/viewport.min.js")
        script(src="https://cdn.jsdelivr.net/npm/chart.js")
        script(src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels")

        style.
            body {
                display: flex;
                flex-direction: column;
                align-items: center;
                gap: 10px;
                font-family: Arial, sans-serif;
                background-color: #f0f0f0;
                margin: 0;
                padding: 0;
                height: 100vh;
                box-sizing: border-box;
            }

            #header {
                text-align: center;
                margin-top: 20px;
            }

            #main-container {
                display: flex;
                flex-direction: column;
                gap: 20px;
                width: 90%;
                margin-top: 20px;
                flex: 1;
            }

            #charts-container {
                display: flex;
                flex-direction: row;
                gap: 10px;
                align-items: flex-start;
                justify-content: center;
                margin-bottom: 20px;
                width: 100%;
            }

            .chart-container {
                display: flex;
                flex-direction: column;
                align-items: center;
                flex: 1;
                max-width: 30%;
                height: 200px;
            }

            .chart-container div {
                margin-bottom: 5px;
                font-size: 1em;
                font-weight: bold;
            }

            .chart-container canvas {
                width: 100%;
                height: auto;
            }

            @media (min-width: 768px) {
                #main-container {
                    flex-direction: row;
                }

                #left-panel {
                    display: flex;
                    flex-direction: column;
                    gap: 10px;
                    flex: 1;
                    position: relative;
                }

                #right-panel {
                    flex: 2;
                    display: flex;
                    flex-direction: column;
                    align-items: center;
                }
            }

            #left-panel {
                display: flex;
                flex-direction: column;
                gap: 10px;
                flex: 1;
                position: relative;
            }

            #right-panel {
                display: flex;
                flex-direction: column;
                align-items: center;
                width: 100%;
            }

            #autocomplete-container {
                position: relative;
                width: 100%;
            }

            #autocomplete-results {
                position: absolute;
                width: 100%;
                top: 35px;
                left: 0;
                right: 0;
                z-index: 1000;
                border: 1px solid #ddd;
                background: #fff;
                list-style-type: none;
                padding: 0;
                margin: 0;
                max-height: 120px;
                overflow-y: auto;
            }

            #autocomplete-results li {
                padding: 5px 10px;
                cursor: pointer;
            }

            #autocomplete-results li:hover {
                background-color: #f0f0f0;
            }

            #buttons {
                display: flex;
                gap: 10px;
                margin-top: 15px;
                flex-wrap: wrap;
            }

            #location-details {
                max-height: 400px;
                overflow-y: auto;
                border: 3px solid #ccc;
                padding: 10px;
                background-color: #fff;
                margin-top: 20px;
                display: none;
            }

            #location-details table {
                width: 100%;
                border-collapse: collapse;
            }

            #location-details th, #location-details td {
                border: 1px solid #ddd;
                padding: 8px;
                text-align: left;
            }

            #location-details tr:nth-child(even) {
                background-color: #f2f2f2;
            }

            #location-details th {
                background-color: #4CAF50;
                color: white;
            }

            #pixi-canvas-container {
                display: flex;
                flex-direction: column;
                align-items: center;
                width: 100%;
                margin-top: 5%;
                margin-bottom: 10%;
                flex: 1;
            }

            canvas {
                width: 100%;
                height: auto;
                max-width: 800px;
                max-height: 500px;
                transition: width 0.5s, height 0.5s;
            }

            #container-right-panel {
                display: flex;
                flex-direction: column;
                flex: 2;
            }


    body
        #header
            h1 Warehouse Map

        #main-container
            #left-panel
                #autocomplete-container
                    input(type="text" id="productCode" placeholder="Enter product code" oninput="autocompleteSearch()")
                    ul#autocomplete-results
                #buttons
                    button(onclick="searchProduct()") Search
                    button#zoomIn Zoom In
                    button#zoomOut Zoom Out
                #location-details
                    table
                        thead
                            tr
                                th Location Code
                                th Parent Code
                                th Position
                                th Inside
                        tbody

            #container-right-panel
                #charts-container
                    .chart-container
                        div Orders
                        canvas#ordersChart
                    .chart-container
                        div Tasks
                        canvas#tasksChart
                    .chart-container
                        div Users Task
                        canvas#usersTasksChart

                #right-panel
                    #pixi-canvas-container

        script.
            const transformedData = !{JSON.stringify(data)};
            const products = !{JSON.stringify(productsData)};
            const stocks = !{JSON.stringify(stocksData)};
            const workload = !{JSON.stringify(workload)};

            console.log(transformedData);
            console.log(workload)

            const app = new PIXI.Application({
                width: 600,
                height: 300,
                backgroundColor: 0xffffff,
            });
            const canvasContainer = document.getElementById('pixi-canvas-container');
            canvasContainer.appendChild(app.view);

            app.view.style.border = '4px solid #000000';

            const viewport = new PIXI.Viewport({
                screenWidth: 600,
                screenHeight: 300,
                worldWidth: 1000,
                worldHeight: 600,
                interaction: app.renderer.plugins.interaction
            });

            app.stage.addChild(viewport);

            viewport.drag().pinch().wheel().decelerate();

            const mapContainer = new PIXI.Container();
            viewport.addChild(mapContainer);

            let highlightedSquare = null;

            function createSquare (x, z, highlight = false, type = "default") {
                const square = new PIXI.Container();
                square.x = x * 25;
                square.y = z * 25;
                square.interactive = true;
                square.on('pointerdown', () => {
                    displayInfo(x, z);
                    highlightItem(x, z, false, type);
                });

                let imageUrl = '';
                switch (type) {
                    case 'User':
                        imageUrl = '/images/thumbnail_icona-operari.png';
                        break;
                    case 'Dock':
                        imageUrl = '/images/icona-door.png';
                        break;
                    case 'Buffer':
                        imageUrl = '/images/thumbnail_icona-buffer.png';
                        break;
                    case 'Location':
                        imageUrl = '/images/thumbnail_icona-estanteria-2.png';
                        break;
                    default:
                        imageUrl = '/images/thumbnail_icona-estanteria-2.png';
                }

                const image = new PIXI.Sprite.from(imageUrl);
                image.width = 25;
                image.height = 25;
                square.addChild(image);

                if (highlight) {
                    const highlightOverlay = new PIXI.Graphics();
                    highlightOverlay.beginFill(0xffeb3b, 0.5);
                    highlightOverlay.drawRect(0, 0, 25, 25);
                    highlightOverlay.endFill();
                    square.addChild(highlightOverlay);
                }

                return square;
            }



            function createTiles () {
                transformedData.filter(item => item.typeId === 6).forEach((locationGroup) => {
                    locationGroup.locations.forEach((location) => {
                        const square = createSquare(location.x, location.z, false, 'Location');
                        mapContainer.addChild(square);
                    });
                });

                const users = transformedData.filter(item => item.placeTypeCode === "User");
                users.forEach((user) => {
                    const square = createSquare(user.x, user.z, false, 'User');
                    mapContainer.addChild(square);
                });

                transformedData.filter(item => item.placeTypeCode === "Dock").forEach((dock) => {
                    const square = createSquare(dock.x, dock.z, false, 'Dock');
                    mapContainer.addChild(square);
                });

                transformedData.filter(item => item.placeTypeCode === "Buffer").forEach((buffer) => {
                    const square = createSquare(buffer.x, buffer.z, false, 'Buffer');
                    mapContainer.addChild(square);
                });
            }


            function isUser(x, z) {
                for (const item of transformedData) {
                    if (item.placeTypeCode === "User" && item.x === x && item.z === z) {
                        return true;
                    }
                }
                return false;
            }

            function isLocation(x, z) {
                for (const item of transformedData) {
                    if (Array.isArray(item.locations)) {
                        if (item.locations.some(location => location.x === x && location.z === z)) {
                            return true;
                        }
                    }
                }
                return false;
            }

            function isBuffer(x, z) {
                for (const item of transformedData) {
                    if (item.placeTypeCode === "Buffer" && item.x === x && item.z === z) {
                        return true;
                    }
                }
                return false;
            }

            function isDock(x, z) {
                for (const item of transformedData) {
                    if (item.placeTypeCode === "Dock" && item.x === x && item.z === z) {
                        return true;
                    }
                }
                return false;
            }

            function displayInfo(x, z) {
                const isUserSquare = isUser(x, z);
                const isLocationSquare = isLocation(x, z);
                const isBufferSquare = isBuffer(x, z);
                const isDockSquare = isDock(x, z);

                switch (true) {
                    case isUserSquare:
                        displayUserInfo(x, z);
                        break;
                    case isLocationSquare:
                        displayLocationInfo(x, z);
                        break;
                    case isBufferSquare:
                        displayBufferInfo(x, z);
                        break;
                    case isDockSquare:
                        displayDockInfo(x, z);
                        break;
                    default:
                        console.log("No information available for this element.");
                }
            }

            function displayUserInfo(x, z) {
                const locationDetails = document.getElementById('location-details');
                locationDetails.style.display = 'block';
                locationDetails.innerHTML = '';

                const user = transformedData.find(item => item.placeTypeCode === "User" && item.x === x && item.z === z);

                if (user) {
                    const table = document.createElement('table');
                    const thead = document.createElement('thead');
                    const tbody = document.createElement('tbody');
                    const trHead = document.createElement('tr');

                    const thId = document.createElement('th');
                    thId.textContent = 'User ID';
                    const thCode = document.createElement('th');
                    thCode.textContent = 'Code';
                    const thName = document.createElement('th');
                    thName.textContent = 'Name';
                    const thSurname = document.createElement('th');
                    thSurname.textContent = 'Surname';
                    const thPosition = document.createElement('th');
                    thPosition.textContent = 'Position';

                    trHead.appendChild(thId);
                    trHead.appendChild(thCode);
                    trHead.appendChild(thName);
                    trHead.appendChild(thSurname);
                    trHead.appendChild(thPosition);
                    thead.appendChild(trHead);
                    table.appendChild(thead);
                    table.appendChild(tbody);

                    const trBody = document.createElement('tr');

                    const tdId = document.createElement('td');
                    tdId.textContent = user.id;
                    const tdCode = document.createElement('td');
                    tdCode.textContent = user.code;
                    const tdName = document.createElement('td');
                    tdName.textContent = user.name || 'N/A';
                    const tdSurname = document.createElement('td');
                    tdSurname.textContent = user.surname || 'N/A';
                    const tdPosition = document.createElement('td');
                    tdPosition.textContent = `| x = ${user.x} | y = ${user.y || 0} | z = ${user.z} |`;

                    trBody.appendChild(tdId);
                    trBody.appendChild(tdCode);
                    trBody.appendChild(tdName);
                    trBody.appendChild(tdSurname);
                    trBody.appendChild(tdPosition);
                    tbody.appendChild(trBody);

                    // Carried Places
                    if (user.carriedPlaces && user.carriedPlaces.length > 0) {
                        const carriedPlacesHeader = document.createElement('tr');
                        carriedPlacesHeader.innerHTML = `<th colspan="5">Carried Places</th>`;
                        tbody.appendChild(carriedPlacesHeader);

                        user.carriedPlaces.forEach(place => {
                            const trPlace = document.createElement('tr');
                            trPlace.innerHTML = `<td colspan="2">Code: ${place.code}</td><td colspan="3">Weight: ${place.weight}</td>`;
                            tbody.appendChild(trPlace);
                        });
                    }

                    // Carried Stocks
                    if (user.carriedStocks && user.carriedStocks.length > 0) {
                        const carriedStocksHeader = document.createElement('tr');
                        carriedStocksHeader.innerHTML = `<th colspan="5">Carried Stocks</th>`;
                        tbody.appendChild(carriedStocksHeader);

                        user.carriedStocks.forEach(stock => {
                            const trStock = document.createElement('tr');
                            trStock.innerHTML = `<td colspan="2">Code: ${stock.code}</td><td colspan="3">Quantity: ${stock.quantity}</td>`;
                            tbody.appendChild(trStock);
                        });
                    }

                    // Orders
                    if (user.orders && user.orders.length > 0) {
                        const ordersHeader = document.createElement('tr');
                        ordersHeader.innerHTML = `<th colspan="5">Orders</th>`;
                        tbody.appendChild(ordersHeader);

                        user.orders.forEach(order => {
                            const trOrder = document.createElement('tr');
                            trOrder.innerHTML = `<td colspan="2">Code: ${order.code}</td><td colspan="3">Task Movements: ${order.taskmovements}</td>`;
                            tbody.appendChild(trOrder);
                        });
                    }

                    locationDetails.appendChild(table);
                } else {
                    console.log("User not found.");
                }
            }

            function displayLocationInfo(x, z) {
                const locationDetails = document.getElementById('location-details');
                locationDetails.style.display = 'block';
                locationDetails.innerHTML = '';

                const table = document.createElement('table');
                const thead = document.createElement('thead');
                const tbody = document.createElement('tbody');
                const trHead = document.createElement('tr');

                const thLocationCode = document.createElement('th');
                thLocationCode.textContent = 'Location Code';
                const thParentCode = document.createElement('th');
                thParentCode.textContent = 'Parent Code';
                const thPosition = document.createElement('th');
                thPosition.textContent = 'Position';
                const thInside = document.createElement('th');
                thInside.textContent = 'Inside';

                trHead.appendChild(thLocationCode);
                trHead.appendChild(thParentCode);
                trHead.appendChild(thPosition);
                trHead.appendChild(thInside);
                thead.appendChild(trHead);
                table.appendChild(thead);
                table.appendChild(tbody);

                transformedData.forEach(item => {
                    if (Array.isArray(item.locations)) {
                        item.locations.forEach(location => {
                            if (location.x === x && location.z === z) {
                                const trBody = document.createElement('tr');

                                const tdLocationCode = document.createElement('td');
                                tdLocationCode.textContent = location.code;
                                const tdParentCode = document.createElement('td');
                                const regex = /^[A-Za-z]\s*\d{6}$/;
                                const isStandardFormat = regex.test(location.code.replace(/\s/g, ''));
                                tdParentCode.textContent = isStandardFormat ? location.code.trim().charAt(0) : location.code;

                                const tdPosition = document.createElement('td');
                                tdPosition.textContent = `| x = ${location.x} | y = ${location.y || 0} | z = ${location.z} |`;

                                const tdInside = document.createElement('td');
                                const locationStocks = stocks.filter(stock => stock.placeId === location.id);
                                if (locationStocks.length > 0) {
                                    locationStocks.forEach(stock => {
                                        const product = products.find(product => product.id === stock.productId);
                                        if (product) {
                                            const productInfo = document.createElement('div');
                                            productInfo.textContent = `${product.name} = ${stock.quantity} Units`;
                                            tdInside.appendChild(productInfo);
                                        }
                                    });
                                } else {
                                    tdInside.textContent = 'No products found.';
                                }

                                trBody.appendChild(tdLocationCode);
                                trBody.appendChild(tdParentCode);
                                trBody.appendChild(tdPosition);
                                trBody.appendChild(tdInside);
                                tbody.appendChild(trBody);
                            }
                        });
                    }
                });

                locationDetails.appendChild(table);
            }

            function displayBufferInfo(x, z) {
                const locationDetails = document.getElementById('location-details');
                locationDetails.style.display = 'block';
                locationDetails.innerHTML = '';

                const buffer = transformedData.find(item => item.placeTypeCode === "Buffer" && item.x === x && item.z === z);

                if (buffer) {
                    const table = document.createElement('table');
                    const thead = document.createElement('thead');
                    const tbody = document.createElement('tbody');
                    const trHead = document.createElement('tr');

                    const thLocationCode = document.createElement('th');
                    thLocationCode.textContent = 'Buffer Code';
                    const thParentCode = document.createElement('th');
                    thParentCode.textContent = 'Parent Code';
                    const thPosition = document.createElement('th');
                    thPosition.textContent = 'Position';
                    const thInside = document.createElement('th');
                    thInside.textContent = 'Inside';

                    trHead.appendChild(thLocationCode);
                    trHead.appendChild(thParentCode);
                    trHead.appendChild(thPosition);
                    trHead.appendChild(thInside);
                    thead.appendChild(trHead);
                    table.appendChild(thead);
                    table.appendChild(tbody);

                    const trBody = document.createElement('tr');

                    const tdLocationCode = document.createElement('td');
                    tdLocationCode.textContent = buffer.code;
                    const tdParentCode = document.createElement('td');
                    const regex = /^[A-Za-z]\s*\d{6}$/;
                    const isStandardFormat = regex.test(buffer.code.replace(/\s/g, ''));
                    tdParentCode.textContent = isStandardFormat ? buffer.code.trim().charAt(0) : buffer.code;

                    const tdPosition = document.createElement('td');
                    tdPosition.textContent = `| x = ${buffer.x} | y = ${buffer.y || 0} | z = ${buffer.z} |`;

                    const tdInside = document.createElement('td');
                    const bufferStocks = stocks.filter(stock => stock.placeId === buffer.id);
                    if (bufferStocks.length > 0) {
                        bufferStocks.forEach(stock => {
                            const product = products.find(product => product.id === stock.productId);
                            if (product) {
                                const productInfo = document.createElement('div');
                                productInfo.textContent = `${product.name} = ${stock.quantity} Units`;
                                tdInside.appendChild(productInfo);
                            }
                        });
                    } else {
                        tdInside.textContent = 'No products found.';
                    }

                    trBody.appendChild(tdLocationCode);
                    trBody.appendChild(tdParentCode);
                    trBody.appendChild(tdPosition);
                    trBody.appendChild(tdInside);
                    tbody.appendChild(trBody);

                    locationDetails.appendChild(table);
                } else {
                    console.log("Buffer not found.");
                }
            }

            function displayDockInfo(x, z) {
                const locationDetails = document.getElementById('location-details');
                locationDetails.style.display = 'block';
                locationDetails.innerHTML = '';

                const dock = transformedData.find(item => item.placeTypeCode === "Dock" && item.x === x && item.z === z);

                if (dock) {
                    const table = document.createElement('table');
                    const thead = document.createElement('thead');
                    const tbody = document.createElement('tbody');
                    const trHead = document.createElement('tr');

                    const thLocationCode = document.createElement('th');
                    thLocationCode.textContent = 'Dock Code';
                    const thParentCode = document.createElement('th');
                    thParentCode.textContent = 'Parent Code';
                    const thPosition = document.createElement('th');
                    thPosition.textContent = 'Position';
                    const thInside = document.createElement('th');
                    thInside.textContent = 'Inside';

                    trHead.appendChild(thLocationCode);
                    trHead.appendChild(thParentCode);
                    trHead.appendChild(thPosition);
                    trHead.appendChild(thInside);
                    thead.appendChild(trHead);
                    table.appendChild(thead);
                    table.appendChild(tbody);

                    const trBody = document.createElement('tr');

                    const tdLocationCode = document.createElement('td');
                    tdLocationCode.textContent = dock.code;
                    const tdParentCode = document.createElement('td');
                    const regex = /^[A-Za-z]\s*\d{6}$/;
                    const isStandardFormat = regex.test(dock.code.replace(/\s/g, ''));
                    tdParentCode.textContent = isStandardFormat ? dock.code.trim().charAt(0) : dock.code;

                    const tdPosition = document.createElement('td');
                    tdPosition.textContent = `| x = ${dock.x} | y = ${dock.y || 0} | z = ${dock.z} |`;

                    const tdInside = document.createElement('td');
                    const dockStocks = stocks.filter(stock => stock.placeId === dock.id);
                    if (dockStocks.length > 0) {
                        dockStocks.forEach(stock => {
                            const product = products.find(product => product.id === stock.productId);
                            if (product) {
                                const productInfo = document.createElement('div');
                                productInfo.textContent = `${product.name} = ${stock.quantity} Units`;
                                tdInside.appendChild(productInfo);
                            }
                        });
                    } else {
                        tdInside.textContent = 'No products found.';
                    }

                    trBody.appendChild(tdLocationCode);
                    trBody.appendChild(tdParentCode);
                    trBody.appendChild(tdPosition);
                    trBody.appendChild(tdInside);
                    tbody.appendChild(trBody);

                    locationDetails.appendChild(table);
                } else {
                    console.log("Dock not found.");
                }
            }

            function findStockByProductId(productId) {
                return stocks.find(stock => stock.productId === productId);
            }

            window.searchProduct = function () {
                const productCode = document.getElementById('productCode').value.trim().toUpperCase();
                let found = false;

                // Buscar en productos
                const product = products.find(product => product.code.toUpperCase() === productCode);
                if (product) {
                    const stock = findStockByProductId(product.id);
                    if (stock) {
                        for (const item of transformedData) {
                            if (Array.isArray(item.locations)) {
                                const location = item.locations.find(loc => loc.id === stock.placeId);
                                if (location) {
                                    highlightItem(location.x, location.z, true, 'Location');
                                    displayLocationInfo(location.x, location.z);
                                    found = true;
                                    break;
                                }
                            }
                        }
                    }
                }

                // Buscar en transformedData
                if (!found) {
                    for (const item of transformedData) {
                        if (item.code && item.code.toUpperCase() === productCode) {
                            if (item.placeTypeCode === 'User') {
                                highlightItem(item.x, item.z, true, 'User');
                                displayUserInfo(item.x, item.z);
                                found = true;
                            } else if (item.placeTypeCode === 'Dock') {
                                highlightItem(item.x, item.z, true, 'Dock');
                                displayDockInfo(item.x, item.z);
                                found = true;
                            } else if (item.placeTypeCode === 'Buffer') {
                                highlightItem(item.x, item.z, true, 'Buffer');
                                displayBufferInfo(item.x, item.z);
                                found = true;
                            }
                        }

                        // Buscar en ubicaciones anidadas
                        if (!found && Array.isArray(item.locations)) {
                            for (const location of item.locations) {
                                if (location.code && location.code.toUpperCase() === productCode) {
                                    highlightItem(location.x, location.z, true, 'Location');
                                    displayLocationInfo(location.x, location.z);
                                    found = true;
                                    break;
                                }
                            }
                        }

                        if (found) break;
                    }
                }

                if (!found) {
                    console.log(`Product not found: ${productCode}.`);
                }
            };



            window.autocompleteSearch = function () {
                let input = document.getElementById('productCode');
                let filter = input.value.toUpperCase();
                let ul = document.getElementById('autocomplete-results');
                ul.innerHTML = '';

                let suggestions = [];

                products.forEach(product => {
                    if (product.code.toUpperCase().startsWith(filter)) {
                        suggestions.push(product.code);
                    }
                });

                transformedData.forEach(item => {
                    if (item.code && item.code.toUpperCase().startsWith(filter)) {
                        suggestions.push(item.code);
                    }
                    if (Array.isArray(item.locations)) {
                        item.locations.forEach(location => {
                            if (location.code && location.code.toUpperCase().startsWith(filter)) {
                                suggestions.push(location.code);
                            }
                        });
                    }
                });

                suggestions = suggestions.slice(0, 4);

                suggestions.forEach(suggestion => {
                    let li = document.createElement('li');
                    li.textContent = suggestion;
                    li.onclick = function () {
                        input.value = suggestion;
                        ul.innerHTML = '';
                        searchProduct();
                    };
                    ul.appendChild(li);
                });
            };

            function highlightItem (x, z, center = false, type = 'default') {
                if (highlightedSquare) {
                    mapContainer.removeChild(highlightedSquare);
                }

                const elementType = type !== 'default' ? type : getElementType(x, z);
                highlightedSquare = createSquare(x, z, true, elementType);
                mapContainer.addChild(highlightedSquare);

                if (center) {
                    viewport.moveCenter(x * 25 + 12.5, z * 25 + 12.5);
                }
            }


            function getElementType (x, z) {
                switch (true) {
                    case isUser(x, z):
                        return 'User';
                    case isDock(x, z):
                        return 'Dock';
                    case isBuffer(x, z):
                        return 'Buffer';
                    case isLocation(x, z):
                        return 'Location';
                    default:
                        return 'default';
                }
            }

            document.addEventListener('click', function (event) {
                const autocompleteList = document.getElementById('autocomplete-results');
                if (!event.target.matches('#productCode')) {
                    autocompleteList.innerHTML = '';
                }
            });

            createTiles();

            const zoomInButton = document.getElementById('zoomIn');
            const zoomOutButton = document.getElementById('zoomOut');

            zoomInButton.addEventListener('click', () => {
                viewport.zoomPercent(0.1);
                console.log('Zoom In clicked');
            });

            zoomOutButton.addEventListener('click', () => {
                viewport.zoomPercent(-0.1);
                console.log('Zoom Out clicked');
            });

            const ordersCtx = document.getElementById('ordersChart').getContext('2d');
            const ordersChart = new Chart(ordersCtx, {
                type: 'pie',
                data: {
                    labels: workload.orderTotals.map(order => order.typeCode),
                    datasets: [{
                        data: workload.orderTotals.map(order => order.numOrders),
                        backgroundColor: ['red', 'blue', 'green', 'purple', 'orange'],
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            callbacks: {
                                label: function (tooltipItem) {
                                    return `${tooltipItem.label}: ${tooltipItem.raw}`;
                                }
                            }
                        },
                        datalabels: {
                            color: '#fff',
                            font: {
                                size: 10,
                                weight: 'bold'
                            },
                            formatter: (value, ctx) => {
                                let label = ctx.chart.data.labels[ctx.dataIndex];
                                if (label.length > 6) {
                                    return label.substring(0, 5) + '...';
                                }
                                return label;
                            }
                        }
                    }
                },
                plugins: [ChartDataLabels]
            });

            const tasksCtx = document.getElementById('tasksChart').getContext('2d');
            const tasksChart = new Chart(tasksCtx, {
                type: 'pie',
                data: {
                    labels: workload.taskTotals.map(task => task.code),
                    datasets: [{
                        data: workload.taskTotals.map(task => task.numTasks),
                        backgroundColor: ['cyan', 'magenta', 'yellow', 'black'],
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            callbacks: {
                                label: function (tooltipItem) {
                                    return `${tooltipItem.label}: ${tooltipItem.raw}`;
                                }
                            }
                        },
                        datalabels: {
                            color: '#fff',
                            font: {
                                size: 10,
                                weight: 'bold'
                            },
                            formatter: (value, ctx) => {
                                let label = ctx.chart.data.labels[ctx.dataIndex];
                                if (label.length > 6) {
                                    return label.substring(0, 5) + '...';
                                }
                                return label;
                            }
                        }
                    }
                },
                plugins: [ChartDataLabels]
            });

            const usersTasksCtx = document.getElementById('usersTasksChart').getContext('2d');
            const usersTasksChart = new Chart(usersTasksCtx, {
                type: 'pie',
                data: {
                    labels: workload.taskTotalsByUser
                        .filter(task => task.numTasks > 0)
                        .map(task => task.code),
                    datasets: [{
                        data: workload.taskTotalsByUser
                            .filter(task => task.numTasks > 0)
                            .map(task => task.numTasks),
                        backgroundColor: ['pink', 'green', 'lime', 'teal'],
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            callbacks: {
                                label: function (tooltipItem) {
                                    return `${tooltipItem.label}: ${tooltipItem.raw}`;
                                }
                            }
                        },
                        datalabels: {
                            color: '#fff',
                            font: {
                                size: 10,
                                weight: 'bold'
                            },
                            formatter: (value, ctx) => {
                                let label = ctx.chart.data.labels[ctx.dataIndex];
                                if (label.length > 6) {
                                    return label.substring(0, 5) + '...';
                                }
                                return label;
                            }
                        }
                    }
                },
                plugins: [ChartDataLabels]
            });

